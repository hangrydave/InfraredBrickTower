#pragma once

#ifndef VLLCOMMANDS_H
#define VLLCOMMANDS_H

#include "pch.h"

namespace VLL
{

#define VLL_PACKET_LENGTH 25

/*

REVELATION

there is a pattern!

0x0b, 0x14, 0x0b, 0x14, 0x0b, 0x14, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a
0x0b, 0x14, 0x0b, 0x14, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x0b, 0x14
...
0x15, 0x0a, 0x0b, 0x14, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x0b, 0x14, 0x15, 0x0a, 0x15, 0x0a
0x15, 0x0a, 0x15, 0x0a, 0x0b, 0x14, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x0b, 0x14, 0x15, 0x0a, 0x0b, 0x14
0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x0b, 0x14, 0x0b, 0x14, 0x15, 0x0a
0x0b, 0x14, 0x0b, 0x14, 0x0b, 0x14, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x0b, 0x14, 0x0b, 0x14, 0x0b, 0x14
0x0b, 0x14, 0x15, 0x0a, 0x0b, 0x14, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x0b, 0x14, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a
...
0x15, 0x0a, 0x0b, 0x14, 0x0b, 0x14, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x0b, 0x14, 0x15, 0x0a, 0x0b, 0x14, 0x15, 0x0a
...
0x15, 0x0a, 0x0b, 0x14, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x0b, 0x14, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a
0x15, 0x0a, 0x15, 0x0a, 0x0b, 0x14, 0x15, 0x0a, 0x15, 0x0a, 0x0b, 0x14, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x0b, 0x14
0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x0b, 0x14, 0x15, 0x0a, 0x15, 0x0a, 0x0b, 0x14, 0x15, 0x0a
0x0b, 0x14, 0x0b, 0x14, 0x0b, 0x14, 0x15, 0x0a, 0x15, 0x0a, 0x0b, 0x14, 0x15, 0x0a, 0x15, 0x0a, 0x0b, 0x14, 0x0b, 0x14
0x0b, 0x14, 0x15, 0x0a, 0x0b, 0x14, 0x15, 0x0a, 0x15, 0x0a, 0x0b, 0x14, 0x15, 0x0a, 0x0b, 0x14, 0x15, 0x0a, 0x15, 0x0a
0x0b, 0x14, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x0b, 0x14, 0x15, 0x0a, 0x0b, 0x14, 0x15, 0x0a, 0x0b, 0x14
0x15, 0x0a, 0x0b, 0x14, 0x0b, 0x14, 0x15, 0x0a, 0x15, 0x0a, 0x0b, 0x14, 0x15, 0x0a, 0x0b, 0x14, 0x0b, 0x14, 0x15, 0x0a
0x15, 0x0a, 0x0b, 0x14, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x0b, 0x14, 0x15, 0x0a, 0x0b, 0x14, 0x0b, 0x14, 0x0b, 0x14
...
0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x0b, 0x14, 0x0b, 0x14, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a
0x0b, 0x14, 0x0b, 0x14, 0x0b, 0x14, 0x15, 0x0a, 0x15, 0x0a, 0x0b, 0x14, 0x0b, 0x14, 0x15, 0x0a, 0x15, 0x0a, 0x0b, 0x14
0x0b, 0x14, 0x0b, 0x14, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x0b, 0x14, 0x0b, 0x14, 0x15, 0x0a, 0x0b, 0x14, 0x15, 0x0a
0x0b, 0x14, 0x15, 0x0a, 0x0b, 0x14, 0x15, 0x0a, 0x15, 0x0a, 0x0b, 0x14, 0x0b, 0x14, 0x15, 0x0a, 0x0b, 0x14, 0x0b, 0x14
0x15, 0x0a, 0x0b, 0x14, 0x0b, 0x14, 0x15, 0x0a, 0x15, 0x0a, 0x0b, 0x14, 0x0b, 0x14, 0x0b, 0x14, 0x15, 0x0a, 0x15, 0x0a
...
0x15, 0x0a, 0x0b, 0x14, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x0b, 0x14, 0x0b, 0x14, 0x0b, 0x14, 0x15, 0x0a, 0x0b, 0x14
0x15, 0x0a, 0x15, 0x0a, 0x0b, 0x14, 0x15, 0x0a, 0x15, 0x0a, 0x0b, 0x14, 0x0b, 0x14, 0x0b, 0x14, 0x0b, 0x14, 0x15, 0x0a
0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x0b, 0x14, 0x0b, 0x14, 0x0b, 0x14, 0x0b, 0x14, 0x0b, 0x14
0x0b, 0x14, 0x15, 0x0a, 0x0b, 0x14, 0x15, 0x0a, 0x0b, 0x14, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a
...
0x0b, 0x14, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x0b, 0x14, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x0b, 0x14
0x15, 0x0a, 0x0b, 0x14, 0x0b, 0x14, 0x15, 0x0a, 0x0b, 0x14, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x0b, 0x14, 0x15, 0x0a

every 0x0b is followed by a 0x14,
and every 0x15 is followed by a 0x0a!

what does it mean?
no idea!

analysis time!

utilizing search and replace, I'll replace the "0x0b, 0x14"s with 1, and the "0x15, 0x0a"s with 0...

(i got the indices from the PDF in the Scout SDK zip linked here: https://pbrick.info/scout-software-developers-kit/index.html)

0	1110000000
1	1100000001
...
4	0100000100
5	0010000101
6	0000000110
7	1110000111
8	1010001000
...
10	0110001010
...
16	0100010000
17	0010010001
18	0000010010
19	1110010011
20	1010010100
21	1000010101
22	0110010110
23	0100010111
24	0000011000
25	1110011001
26	1100011010
27	1010011011
28	0110011100
29	0100011101
30	0010011110
31	0000011111
32	1010100000
33	1000100001
34	0110100010

bingo!

so I know that the messages are:
	1 start bit
	3 checksum bits
	7 data bits
	1 stop bit (light off)
(source: https://www.eurobricks.com/forum/index.php?/forums/topic/188584-mulpi-a-multiple-lego-remote-protocol-interface/&tab=comments#comment-3475050)

i'll look at a small chunk:

    checksum
	 |	data
	[-][-----] 
4	0100000100
5	0010000101
6	0000000110
7	1110000111
8	1010001000

i know from the aforementioned Scout SDK document that there are 128 VLL codes (0-127), which lines up with knowing that there are 7 data bits since 127 in binary is 1111111.
the checksum is calculated using the below equation (source: https://www.elecbrick.com/vll/)

	checksum(n) = 7 - ((n + (n >> 2) + (n >> 4)) & 7)

let's confirm this.
the checksum on the data above for index 4 is 010, so:

	checksum(4) = 7 - ((4 + (4 >> 2) + (4 >> 4)) & 7) = 2

in binary, 2 is 10. mission accomplished!

so, i've got the checksum and the data. what about the start bit and the stop bit?

RCX2VLL.h from the Mindstorms SDK has some stuff to say on this. TODO: research later

*/



// I grabbed these by monitoring USB traffic through WireShark from the VLL Sample program provided in the Mindstorms SDK (download here: https://www.philohome.com/sdk25/sdk25.htm)
// (I ran this on a Windows XP VM)
// 
//									start                checksum                                                  data                                                   stop
//								[--------]  [--------------------------------]  [--------------------------------------------------------------------------------]  [--------------]
#define VLL_FORWARD_IMMEDIATE	0x51, 0x0a, 0x0b, 0x14, 0x0b, 0x14, 0x0b, 0x14, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x0b, 0x0b, 0x00
#define VLL_BACKWARD_IMMEDIATE	0x51, 0x0a, 0x0b, 0x14, 0x0b, 0x14, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x0b, 0x14, 0x0b, 0x0b, 0x00
		
#define VLL_BEEP_1_IMMEDIATE	0x51, 0x0a, 0x15, 0x0a, 0x0b, 0x14, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x0b, 0x14, 0x15, 0x0a, 0x15, 0x0a, 0x0b, 0x0b, 0x00
#define VLL_BEEP_2_IMMEDIATE	0x51, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x0b, 0x14, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x0b, 0x14, 0x15, 0x0a, 0x0b, 0x14, 0x0b, 0x0b, 0x00
#define VLL_BEEP_3_IMMEDIATE	0x51, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x0b, 0x14, 0x0b, 0x14, 0x15, 0x0a, 0x0b, 0x0b, 0x00
#define VLL_BEEP_4_IMMEDIATE	0x51, 0x0a, 0x0b, 0x14, 0x0b, 0x14, 0x0b, 0x14, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x0b, 0x14, 0x0b, 0x14, 0x0b, 0x14, 0x0b, 0x0b, 0x00
#define VLL_BEEP_5_IMMEDIATE	0x51, 0x0a, 0x0b, 0x14, 0x15, 0x0a, 0x0b, 0x14, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x0b, 0x14, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x0b, 0x0b, 0x00
		
#define VLL_STOP				0x51, 0x0a, 0x15, 0x0a, 0x0b, 0x14, 0x0b, 0x14, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x0b, 0x14, 0x15, 0x0a, 0x0b, 0x14, 0x15, 0x0a, 0x0b, 0x0b, 0x00
		
#define VLL_FORWARD_HALF		0x51, 0x0a, 0x15, 0x0a, 0x0b, 0x14, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x0b, 0x14, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x0b, 0x0b, 0x00
#define VLL_FORWARD_ONE			0x51, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x0b, 0x14, 0x15, 0x0a, 0x15, 0x0a, 0x0b, 0x14, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x0b, 0x14, 0x0b, 0x0b, 0x00
#define VLL_FORWARD_TWO			0x51, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x0b, 0x14, 0x15, 0x0a, 0x15, 0x0a, 0x0b, 0x14, 0x15, 0x0a, 0x0b, 0x0b, 0x00
#define VLL_FORWARD_FIVE		0x51, 0x0a, 0x0b, 0x14, 0x0b, 0x14, 0x0b, 0x14, 0x15, 0x0a, 0x15, 0x0a, 0x0b, 0x14, 0x15, 0x0a, 0x15, 0x0a, 0x0b, 0x14, 0x0b, 0x14, 0x0b, 0x0b, 0x00
#define VLL_BACKWARD_HALF		0x51, 0x0a, 0x0b, 0x14, 0x15, 0x0a, 0x0b, 0x14, 0x15, 0x0a, 0x15, 0x0a, 0x0b, 0x14, 0x15, 0x0a, 0x0b, 0x14, 0x15, 0x0a, 0x15, 0x0a, 0x0b, 0x0b, 0x00
#define VLL_BACKWARD_ONE		0x51, 0x0a, 0x0b, 0x14, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x0b, 0x14, 0x15, 0x0a, 0x0b, 0x14, 0x15, 0x0a, 0x0b, 0x14, 0x0b, 0x0b, 0x00
#define VLL_BACKWARD_TWO		0x51, 0x0a, 0x15, 0x0a, 0x0b, 0x14, 0x0b, 0x14, 0x15, 0x0a, 0x15, 0x0a, 0x0b, 0x14, 0x15, 0x0a, 0x0b, 0x14, 0x0b, 0x14, 0x15, 0x0a, 0x0b, 0x0b, 0x00
#define VLL_BACKWARD_FIVE		0x51, 0x0a, 0x15, 0x0a, 0x0b, 0x14, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x0b, 0x14, 0x15, 0x0a, 0x0b, 0x14, 0x0b, 0x14, 0x0b, 0x14, 0x0b, 0x0b, 0x00
		
#define VLL_BEEP_1_PROGRAM		0x51, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x0b, 0x14, 0x0b, 0x14, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x0b, 0x0b, 0x00
#define VLL_BEEP_2_PROGRAM		0x51, 0x0a, 0x0b, 0x14, 0x0b, 0x14, 0x0b, 0x14, 0x15, 0x0a, 0x15, 0x0a, 0x0b, 0x14, 0x0b, 0x14, 0x15, 0x0a, 0x15, 0x0a, 0x0b, 0x14, 0x0b, 0x0b, 0x00
#define VLL_BEEP_3_PROGRAM		0x51, 0x0a, 0x0b, 0x14, 0x0b, 0x14, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x0b, 0x14, 0x0b, 0x14, 0x15, 0x0a, 0x0b, 0x14, 0x15, 0x0a, 0x0b, 0x0b, 0x00
#define VLL_BEEP_4_PROGRAM		0x51, 0x0a, 0x0b, 0x14, 0x15, 0x0a, 0x0b, 0x14, 0x15, 0x0a, 0x15, 0x0a, 0x0b, 0x14, 0x0b, 0x14, 0x15, 0x0a, 0x0b, 0x14, 0x0b, 0x14, 0x0b, 0x0b, 0x00
#define VLL_BEEP_5_PROGRAM		0x51, 0x0a, 0x15, 0x0a, 0x0b, 0x14, 0x0b, 0x14, 0x15, 0x0a, 0x15, 0x0a, 0x0b, 0x14, 0x0b, 0x14, 0x0b, 0x14, 0x15, 0x0a, 0x15, 0x0a, 0x0b, 0x0b, 0x00
		
#define VLL_WAIT_LIGHT			0x51, 0x0a, 0x15, 0x0a, 0x0b, 0x14, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x0b, 0x14, 0x0b, 0x14, 0x0b, 0x14, 0x15, 0x0a, 0x0b, 0x14, 0x0b, 0x0b, 0x00
#define VLL_SEEK_LIGHT			0x51, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x0b, 0x14, 0x15, 0x0a, 0x15, 0x0a, 0x0b, 0x14, 0x0b, 0x14, 0x0b, 0x14, 0x0b, 0x14, 0x15, 0x0a, 0x0b, 0x0b, 0x00
#define VLL_CODE				0x51, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x0b, 0x14, 0x0b, 0x14, 0x0b, 0x14, 0x0b, 0x14, 0x0b, 0x14, 0x0b, 0x0b, 0x00
#define VLL_KEEP_ALIVE			0x51, 0x0a, 0x0b, 0x14, 0x15, 0x0a, 0x0b, 0x14, 0x15, 0x0a, 0x0b, 0x14, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x0b, 0x0b, 0x00
		
#define VLL_RUN					0x51, 0x0a, 0x0b, 0x14, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x0b, 0x14, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x0b, 0x14, 0x0b, 0x0b, 0x00
#define VLL_DELETE_PROGRAM		0x51, 0x0a, 0x15, 0x0a, 0x0b, 0x14, 0x0b, 0x14, 0x15, 0x0a, 0x0b, 0x14, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0a, 0x0b, 0x14, 0x15, 0x0a, 0x0b, 0x0b, 0x00

#define GenerateVLLFunction(commandName, commandData) \
inline void Cmd_##commandName##(unsigned char* buffer) \
{ \
	unsigned char commandBytes[VLL_PACKET_LENGTH] { commandData }; \
	for (int i = 0; i < VLL_PACKET_LENGTH; i++) \
	{ \
		buffer[i] = commandBytes[i]; \
	} \
}

	GenerateVLLFunction(Beep1Immediate, VLL_BEEP_1_IMMEDIATE)
	GenerateVLLFunction(Beep2Immediate, VLL_BEEP_2_IMMEDIATE)
	GenerateVLLFunction(Beep3Immediate, VLL_BEEP_3_IMMEDIATE)
	GenerateVLLFunction(Beep4Immediate, VLL_BEEP_4_IMMEDIATE)
	GenerateVLLFunction(Beep5Immediate, VLL_BEEP_5_IMMEDIATE)
	GenerateVLLFunction(ForwardImmediate, VLL_FORWARD_IMMEDIATE)
	GenerateVLLFunction(BackwardImmediate, VLL_BACKWARD_IMMEDIATE)
	GenerateVLLFunction(Stop, VLL_STOP)
	GenerateVLLFunction(Run, VLL_RUN)
	GenerateVLLFunction(Delete, VLL_DELETE_PROGRAM)
	GenerateVLLFunction(Beep1, VLL_BEEP_1_PROGRAM)
	GenerateVLLFunction(Beep2, VLL_BEEP_2_PROGRAM)
	GenerateVLLFunction(Beep3, VLL_BEEP_3_PROGRAM)
	GenerateVLLFunction(Beep4, VLL_BEEP_4_PROGRAM)
	GenerateVLLFunction(Beep5, VLL_BEEP_5_PROGRAM)
	GenerateVLLFunction(ForwardHalf, VLL_FORWARD_HALF)
	GenerateVLLFunction(ForwardOne, VLL_FORWARD_ONE)
	GenerateVLLFunction(ForwardTwo, VLL_FORWARD_TWO)
	GenerateVLLFunction(ForwardFive, VLL_FORWARD_FIVE)
	GenerateVLLFunction(BackwardHalf, VLL_BACKWARD_HALF)
	GenerateVLLFunction(BackwardOne, VLL_BACKWARD_ONE)
	GenerateVLLFunction(BackwardTwo, VLL_BACKWARD_TWO)
	GenerateVLLFunction(BackwardFive, VLL_BACKWARD_FIVE)
	GenerateVLLFunction(WaitLight, VLL_WAIT_LIGHT)
	GenerateVLLFunction(SeekLight, VLL_SEEK_LIGHT)
	GenerateVLLFunction(Code, VLL_CODE)
	GenerateVLLFunction(KeepAlive, VLL_KEEP_ALIVE)
}

#endif VLLCOMMANDS_H
